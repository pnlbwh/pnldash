#!/usr/bin/env python
from __future__ import print_function
from plumbum import cli, local
from pnldash_config import *
import sys
from pnldash_lib import *
from signal import signal, SIGPIPE, SIG_DFL
signal(SIGPIPE, SIG_DFL)  # handle "Broken pipe"

import logging
logging.basicConfig(
    level=logging.INFO,
    format='%(levelname)s:%(name)s: %(message)s')
log = logging.getLogger(__name__)


class App(cli.Application):
    def main(self, *args):
        if args:
            print("Unknown command {0!r}".format(args[0]))
            return 1
        if not self.nested_command:
            print("No command given")
            return 1
        _, cmd = self.nested_command
        subcmd = cmd[0].split()[1]
        if subcmd != 'db':
            if not CACHE_DIR.exists():
                log.info( "Running for the first time, might take a few minutes to generate the cache files.")
                CACHE_DIR.mkdir()


@App.subcommand("db")
class Db(cli.Application):
    """Interface to the pnldash central database."""

    def main(self, *args):
        if args:
            print("Unknown command {0!r}".format(args[0]))
            return 1
        if not self.nested_command:
            print("No command given")
            return 1


@App.subcommand("find")
class Find(cli.Application):
    """Crawls project directory for image files and saves the result to a cache file."""

    echo = cli.Flag(
        ['-e', '--echo'], default=False, help="Print files to stdout as well")

    def main(self):
        make_find(self.echo, useCache=False)


@App.subcommand("makepaths")
class Paths(cli.Application):
    """Updates pipeline paths (use if newly generated pipeline paths available)"""

    def main(self):
        PATHS_CSV.delete()
        make_csvs()


@App.subcommand("extra")
class Extra(cli.Application):
    """Prints unaccounted files."""

    def main(self):
        # make sure extra cache file is up to date
        dfextra = make_extra()
        if dfextra.empty:
            print('No unaccounted files.', file=sys.stderr)
        print('\n'.join(sorted(dfextra['path'].values)))


if __name__ == '__main__':
    import pnldash_cli.ls
    import pnldash_cli.init
    import pnldash_cli.status
    import pnldash_cli.info
    import pnldash_cli.env
    import pnldash_cli.db
    App.subcommand("status", pnldash_cli.status.Status)
    App.subcommand("init", pnldash_cli.init.Init)
    App.subcommand("ls", pnldash_cli.ls.Ls)
    App.subcommand("info", pnldash_cli.info.Info)
    App.subcommand("env", pnldash_cli.env.Env)

    Db.subcommand("push", pnldash_cli.db.Push)
    Db.subcommand("list", pnldash_cli.db.List)
    Db.subcommand("info", pnldash_cli.db.Info)
    Db.subcommand("report", pnldash_cli.db.Report)
    Db.subcommand("open", pnldash_cli.db.Open)
    App.run()
