#!/usr/bin/env python
from plumbum import cli, local, FG
import csv
import yaml
from collections import OrderedDict
import sys

PROJECT_YML = 'project.yml'
PNL_PROJECTS_DB = 'PNL_PROJECTS_DB'

TEMPLATE="""\
projectInfo:
    projectName: {}
    grantId:
    description:
pipelines:
    - parameters:
        version_FreeSurfer: 5.3.0
        hash_UKFTractography: 421a7ad
        hash_tract_querier: e045eab
        hash_BRAINSTools: 41353e8
        hash_trainingDataT1AHCC: d6e5990
      paths:
        fs_brain: _data/003_GNX_007/freesurfer/mri/brain.mgz
        fs_wmparc: _data/003_GNX_007/freesurfer/mri/wmparc.mgz
        dwied: _data/003_GNX_007/std_dwied0.nrrd
        dwimask: _data/003_GNX_007/std_dwimask0.nrrd
        t1mask: _data/003_GNX_007/std_t1mask0.nrrd
        t1: _data/003_GNX_007/std_t10.nrrd
        wmql: _data/003_GNX_007/wmql/*.vtk
        tractmeasures: _data/003_GNX_007/std_tractmeasures0.csv
        dwixc: _data/003_GNX_007/std_dwixc0.nrrd
        ukf: _data/003_GNX_007/std_ukf0.vtk
        t1xc: _data/003_GNX_007/std_t1xc0.nrrd
        fsindwi: _data/003_GNX_007/std_fsindwi0.nii.gz
        dwi: _data/003_GNX_007/std_dwi0.nhdr
        caseid: 003_GNX_007
        caselist: ./caselist.txt
""".format(local.cwd.name.__str__())


def readProjectInfo():
    with open(PROJECT_YML, 'r') as f:
        return yaml.load(f)


class Publish(cli.Application):
    def main(self, *args):
        if args:
            print("Unknown command {0!r}".format(args[0]))
            return 1
        if self.nested_command:
            return


@Publish.subcommand("init")
class Init(cli.Application):
    """Makes template 'project.yml'"""
    def main(self):
        if local.path(PROJECT_YML).exists():
            msg = "'{}' already exists, to recreate it delete it first.".format(PROJECT_YML)
            print(msg)
            sys.exit(1)

        represent_dict_order = lambda self, data: self.represent_mapping('tag:yaml.org,2002:map', data.items())
        yaml.add_representer(OrderedDict, represent_dict_order)

        with open(PROJECT_YML, 'w') as f:
            f.write(TEMPLATE)
        print("Made template '{}'.".format(PROJECT_YML))
        print("Now edit it and run 'pnlpublish push'")


@Publish.subcommand("push")
class Push(cli.Application):
    """Copies project.yml to central project database"""
    def readFullName(self):
        return local.cwd.__str__().replace('/','-')[1:] + '.yml'

    def main(self):
        import os
        from plumbum.cmd import scp

        centralRepo = os.environ.get(PNL_PROJECTS_DB, None)

        if not centralRepo:
            errmsg = "Set '{}' environment variable first.".format(
                PNL_PROJECTS_DB)
            raise Exception(errmsg)

        destName = centralRepo + '/' + self.readFullName()

        print("Copy project.yml to '{}'".format(destName))
        scp['project.yml', destName] & FG
        print("Successfully copied '{}' to '{}'".format('project.yml', destName))


if __name__ == '__main__':
    Publish.run()
