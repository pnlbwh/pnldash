#!/usr/bin/env python
from plumbum import cli, local, FG
import csv
import yaml
from collections import OrderedDict

PROJECT_FILE = 'project.yml'
PNL_PROJECTS_DB = 'PNL_PROJECTS_DB'

TEMPLATE="""\
projectInfo:
    projectName: {}
    projectPath: {}
    grantId:
    description:
pipelines:
    - parameters:
        version_FreeSurfer: 5.3.0
        hash_UKFTractography: 421a7ad
        hash_tract_querier: e045eab
        hash_BRAINSTools: 41353e8
        hash_trainingDataT1AHCC: d6e5990
      paths:
        fs: _data/003_GNX_007/freesurfer/
        dwied: _data/003_GNX_007/std_dwied0.nrrd
        dwimask: _data/003_GNX_007/std_dwimask0.nrrd
        t1mask: _data/003_GNX_007/std_t1mask0.nrrd
        t1: _data/003_GNX_007/std_t10.nrrd
        wmql: _data/003_GNX_007/wmql/
        tractmeasures: _data/003_GNX_007/std_tractmeasures0.csv
        dwixc: _data/003_GNX_007/std_dwixc0.nrrd
        ukf: _data/003_GNX_007/std_ukf0.vtk
        t1xc: _data/003_GNX_007/std_t1xc0.nrrd
        fsindwi: _data/003_GNX_007/std_fsindwi0.nii.gz
        dwi: _data/003_GNX_007/std_dwi0.nhdr
        caseid: 003_GNX_007
        caselist: ./caselist.txt
""".format(local.cwd.name.__str__(), local.cwd.__str__())


def readProjectInfo():
    with open(PROJECT_FILE, 'r') as f:
        return yaml.load(f)


class Publish(cli.Application):
    def main(self, *args):
        if args:
            print("Unknown command {0!r}".format(args[0]))
            return 1
        if self.nested_command:
            return

        readAndSetSrcPaths()
        combos = readComboPaths(self.parent.paramsFile)
        projectInfo = readProjectInfo()

        paramsCsv = '_{}_publish_params.csv'.format(self.parent.name)
        pathsCsv = '_{}_publish_paths.csv'.format(self.parent.name)

        with open(paramsCsv, 'w') as fparamsCsv:
            csvwriter = csv.writer(fparamsCsv)
            hdr = ['projectName', 'projectPath', 'description', 'paramId',
                   'param', 'paramValue']
            csvwriter.writerow(hdr)
            with open(pathsCsv, 'w') as fpathsCsv:
                hdr = ['projectName', 'projectPath', 'paramId', 'pathKey',
                       'caseid', 'path', 'exists']
                csvwriter2 = csv.writer(fpathsCsv)
                csvwriter2.writerow(hdr)

                for combo in combos:
                    for k, v in combo['paramCombo'].items():
                        csvwriter.writerow([projectInfo['projectName'],
                                            projectInfo['projectPath'],
                                            projectInfo['description'],
                                            combo['paramId'], k, v])
                    for pathKey, subjectPaths in combo['paths'].items():
                        for subjectPath in subjectPaths:
                            csvwriter2.writerow(
                                [projectInfo['projectName'],
                                 projectInfo['projectPath'], combo['paramId'],
                                 pathKey, subjectPath.caseid, subjectPath.path,
                                 subjectPath.path.exists()])
            print("Made '{}'".format(paramsCsv))
            print("Made '{}'".format(pathsCsv))


@Publish.subcommand("init")
class Init(cli.Application):
    def main(self):
        represent_dict_order = lambda self, data: self.represent_mapping('tag:yaml.org,2002:map', data.items())
        yaml.add_representer(OrderedDict, represent_dict_order)

        with open(PROJECT_FILE, 'w') as f:
            f.write(TEMPLATE)
        print("Made '{}'".format(PROJECT_FILE))

def readFullName():
    # with open('project.yml', 'r') as f:
    #         yml = yaml.load(f)
    # name = yml['projectInfo']['projectName']
    # return yml['projectInfo']['projectPath'].replace('/','-')[1:] + '--' + name + '.yml'
    return local.cwd.__str__().replace('/','-')[1:] + '.yml'

@Publish.subcommand("push")
class Push(cli.Application):
    """Copies yml to central project database"""
    def main(self):
        import os
        from plumbum.cmd import scp
        centralRepo = os.environ.get(PNL_PROJECTS_DB, None)
        if not centralRepo:
            errmsg = "Set '{}' environment variable first.".format(
                PNL_PROJECTS_DB)
            raise Exception(errmsg)

        destName = centralRepo + '/' + readFullName()
        scp['project.yml', destName] & FG

        print("Successfully copied '{}' to '{}'".format('project.yml'
                                                        ,centralRepo + '/' + destName))


@Publish.subcommand("tocsv")
class ToCsv(cli.Application):
    """Expands project yml file to csvs"""
    def main(self):
        import os
        with open(PROJECT_FILE, 'r') as f:
            yml = yaml.load(f)

        PARAM_HDR = ['projectName', 'projectPath', 'description', 'paramId',
                    'param', 'paramValue']
        PATH_HDR = ['projectName', 'projectPath', 'paramId', 'pathKey',
                    'caseid', 'path', 'exists']

        def readFileLines(fn):
            with open(fn, 'r') as f:
                return f.read().splitlines()

        projectInfo = yml['projectInfo']
        name = projectInfo['projectName']
        fullName = projectInfo['projectPath'].replace('/','-')[1:] + '--' + name
        paramsCsv = '{}--params.csv'.format(fullName)
        pathsCsv = '{}--paths.csv'.format(fullName)

        with open(paramsCsv, 'w') as fparamsCsv:
            csvwriterParams = csv.writer(fparamsCsv)
            csvwriterParams.writerow(PARAM_HDR)
            with open(pathsCsv, 'w') as fpathsCsv:
                csvwriterPaths = csv.writer(fpathsCsv)
                csvwriterPaths.writerow(PATH_HDR)

                for paramId, pipeline in enumerate(yml['pipelines']):
                    for param, paramVal in pipeline['parameters'].items():
                        csvwriterParams.writerow([projectInfo['projectName'],
                                            projectInfo['projectPath'],
                                            projectInfo['grantId'],
                                            projectInfo['description'],
                                            paramId, param, paramVal])
                    caseids = readFileLines(pipeline['paths']['caselist'])
                    caseidString = pipeline['paths']['caseid']
                    for pathKey, pathTemplate in pipeline['paths'].items():
                        if pathKey == 'caselist' or pathKey == 'caseid':
                            continue
                        for caseid in caseids:
                            path = pathTemplate.replace(caseidString, caseid)
                            csvwriterPaths.writerow(
                                [projectInfo['projectName'],
                                projectInfo['projectPath'],
                                paramId,
                                pathKey, caseid, path,
                                os.path.exists(path)])
            print("Made '{}'".format(paramsCsv))
            print("Made '{}'".format(pathsCsv))


if __name__ == '__main__':
    Publish.run()
