#!/usr/bin/env python

import sys
from plumbum import cli, local, FG, SshMachine
from pnldash_lib import read_project_yml, read_yml, open_db
from pnldash_config import *
import yaml
from plumbum.path.utils import copy
import logging
logging.basicConfig(
    level=logging.INFO,
    # format='%(asctime)s - %(levelname)5s - %(name)s:  %(message)s',
    format='%(levelname)s:%(name)s: %(message)s',
    datefmt="%Y-%m-%d %H:%M")
log = logging.getLogger(__name__)


class App(cli.Application):
    def main(self, *args):
        if args:
            print("Unknown command {0!r}".format(args[0]))
            return 1
        if not self.nested_command:
            print("No command given")
            return 1  # error exit code


@App.subcommand("make")
class Make(cli.Application):
    """Make HTML dashboard report."""

    def main(self, *args):

        Rcmd = "library('rmarkdown'); render('pnldashboard.Rmd')"

        with open_db() as (machine, dbpath):
            log.info('Make dashboard')
            with machine.cwd(dbpath):
                _ = machine['R']('-e', Rcmd)
            copy(dbpath / 'pnldashboard.html', local.cwd)
            log.info("Made 'pnldashboard.html'")

# def _print_map(d, prepend='', keys=None, fd=sys.stderr):
#     if not keys:
#         keys = d.keys()
#     for k in keys:
#         fd.write("{}{:<25} {:<15}".format(prepend, k, d[k]) + '\n')

# @App.subcommand("env")
# class Env(cli.Application):
#     """Print the bash environment setup for a project's data paths."""

#     paramid = cli.SwitchAttr(
#         ['-p', '--paramid'],
#         int,
#         default=0,
#         help="The index of the pipeline whose paths you want")

#     #TODO make unset option?

#     def main(self, name):
#         def escape(filepath):
#             return filepath.__str__().replace('(', '\(').replace(')', '\)')

#         # TODO be able to select projects with same names
#         projectdir, yml = db.get_projects(name)[0]

#         print("# param id #{} (there are a total of {} pipeline(s))".format(
#             self.paramid, len(yml['pipelines'])))
#         _print_map(yml['pipelines'][self.paramid]['parameters'], prepend='# ')
#         print('')
#         print("export root={}".format(projectdir))
#         paths = yml['pipelines'][self.paramid]['paths']
#         for key, path in paths.items():
#             if key == 'caselist':
#                 continue
#             print("export {}={}".format(key, escape(path)))


@App.subcommand("list")
class List(cli.Application):
    """List the project names in the central database"""

    def main(self):
        PROJECT_YML_FILENAME = PROJECT_YML.name

        with open_db() as (machine, dbpath):
            ymlfiles = [y for y in dbpath // ('*/' + PROJECT_YML_FILENAME)]
            for ymlfile in ymlfiles:
                projdir = ymlfile.dirname.replace('---', '/')
                ymlstr = machine['cat'](ymlfile)
                yml = yaml.load(ymlstr, Loader=yaml.loader.BaseLoader)
                numpipelines = len(yml['pipelines'])
                print(yml['name'] + " ({}) ({} pipeline(s))".format(projdir,
                                                                numpipelines))


@App.subcommand("info")
class Info(cli.Application):
    """Show the project.yml contents for a project."""

    def main(self, name):
        PROJECT_YML_FILENAME = PROJECT_YML.name

        with open_db() as (machine, dbpath):
            ymlfiles = [y for y in dbpath // ('*/' + PROJECT_YML_FILENAME)]
            for ymlfile in ymlfiles:
                # TODO be able to select projects with same names
                projdir = ymlfile.dirname.replace('---', '/')
                ymlstr = machine['cat'](ymlfile)
                yml = yaml.load(ymlstr, Loader=yaml.loader.BaseLoader)
                if yml['name'] != name:
                    continue
                print("# {} ({})".format(yml['name'], projdir))
                print
                print("## Description\n")
                print(yml['description'])
                # print("## Pipelines\n")
                # pprint(yml['pipelines'])


if __name__ == '__main__':
    App.run()
